/**
 * ESP32 CAM MQTT 클라이언트 코드
 * 
 * 목적: 이미지 캡처 및 MQTT를 통한 라즈베리파이 전송
 */

#include <WiFi.h>
#include <PubSubClient.h>
#include "esp_camera.h"
#include "Arduino.h"
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"
#include <base64.h>

// WiFi 설정
const char* ssid = "YOUR_WIFI_SSID";         // 변경 필요
const char* password = "YOUR_WIFI_PASSWORD"; // 변경 필요

// MQTT 브로커 설정
const char* mqtt_server = "RASPBERRY_PI_IP"; // 변경 필요: 라즈베리파이 IP 주소
const int mqtt_port = 1883;
const char* mqtt_client_id = "ESP32_CAM";
const char* mqtt_username = ""; // 필요한 경우 설정
const char* mqtt_password = ""; // 필요한 경우 설정

// MQTT 토픽
// 발행 토픽
const char* topic_image_data = "smartfarm/camera/image";
const char* topic_status = "smartfarm/status/camera";

// 구독 토픽
const char* topic_capture = "smartfarm/camera/capture";
const char* topic_interval = "smartfarm/camera/interval";
const char* topic_quality = "smartfarm/camera/quality";
const char* topic_flash = "smartfarm/camera/flash";

// ESP32 CAM 핀 설정 (AI Thinker 모듈)
#define PWDN_GPIO_NUM     32
#define RESET_GPIO_NUM    -1
#define XCLK_GPIO_NUM      0
#define SIOD_GPIO_NUM     26
#define SIOC_GPIO_NUM     27
#define Y9_GPIO_NUM       35
#define Y8_GPIO_NUM       34
#define Y7_GPIO_NUM       39
#define Y6_GPIO_NUM       36
#define Y5_GPIO_NUM       21
#define Y4_GPIO_NUM       19
#define Y3_GPIO_NUM       18
#define Y2_GPIO_NUM        5
#define VSYNC_GPIO_NUM    25
#define HREF_GPIO_NUM     23
#define PCLK_GPIO_NUM     22

// LED 플래시 핀
#define LED_PIN           4

// 변수
unsigned long lastCaptureTime = 0;
int captureInterval = 60000; // 기본 1분마다 캡처
bool flashEnabled = false;
int jpegQuality = 10;       // 10-63 사이 값, 낮을수록 품질 좋음
int captureCount = 0;

// WiFi 및 MQTT 클라이언트
WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  // 시리얼 통신 초기화
  Serial.begin(115200);
  Serial.setDebugOutput(true);
  Serial.println("\n===== ESP32 CAM MQTT 클라이언트 =====");
  
  // Brownout 감지기 비활성화
  WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);
  
  // LED 플래시 핀 설정
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  
  // 카메라 초기화
  initCamera();
  
  // WiFi 연결
  setupWifi();
  
  // MQTT 설정
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
  
  Serial.println("초기화 완료");
}

void loop() {
  // MQTT 연결 확인
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  
  // 현재 시간
  unsigned long currentMillis = millis();
  
  // 주기적 이미지 캡처
  if (currentMillis - lastCaptureTime >= captureInterval) {
    lastCaptureTime = currentMillis;
    captureAndSendImage();
  }
}

// 카메라 초기화 함수
bool initCamera() {
  // 카메라 구성
  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sscb_sda = SIOD_GPIO_NUM;
  config.pin_sscb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.pixel_format = PIXFORMAT_JPEG;
  
  // 초기 설정은 낮은 해상도로 시작
  config.frame_size = FRAMESIZE_VGA; // 640x480
  config.jpeg_quality = jpegQuality;
  config.fb_count = 1;
  
  // 카메라 초기화
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("카메라 초기화 실패, error 0x%x", err);
    return false;
  }
  
  Serial.println("카메라 초기화 성공");
  return true;
}

// WiFi 연결 함수
void setupWifi() {
  delay(10);
  Serial.println();
  Serial.print("WiFi 연결 중: ");
  Serial.println(ssid);
  
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.println("WiFi 연결됨");
  Serial.print("IP 주소: ");
  Serial.println(WiFi.localIP());
}

// MQTT 재연결 함수
void reconnect() {
  // 연결될 때까지 시도
  while (!client.connected()) {
    Serial.print("MQTT 연결 시도 중...");
    
    // 연결 시도
    if (client.connect(mqtt_client_id, mqtt_username, mqtt_password)) {
      Serial.println("연결됨");
      
      // 토픽 구독
      client.subscribe(topic_capture);
      client.subscribe(topic_interval);
      client.subscribe(topic_quality);
      client.subscribe(topic_flash);
      
      // 연결 상태 알림 발행
      client.publish(topic_status, "online");
    } else {
      Serial.print("실패, rc=");
      Serial.print(client.state());
      Serial.println(" 5초 후 재시도");
      delay(5000);
    }
  }
}

// MQTT 메시지 수신 콜백
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("메시지 수신 [");
  Serial.print(topic);
  Serial.print("]: ");
  
  // 페이로드를 문자열로 변환
  char message[length + 1];
  for (int i = 0; i < length; i++) {
    message[i] = (char)payload[i];
  }
  message[length] = '\0';
  Serial.println(message);
  
  // 캡처 명령
  if (strcmp(topic, topic_capture) == 0) {
    if (strcmp(message, "capture") == 0) {
      captureAndSendImage();
    }
  }
  // 캡처 간격 설정
  else if (strcmp(topic, topic_interval) == 0) {
    int newInterval = atoi(message);
    if (newInterval >= 5000) { // 최소 5초
      captureInterval = newInterval;
      Serial.print("캡처 간격 변경: ");
      Serial.println(captureInterval);
    }
  }
  // 이미지 품질 설정
  else if (strcmp(topic, topic_quality) == 0) {
    int newQuality = atoi(message);
    if (newQuality >= 0 && newQuality <= 63) {
      jpegQuality = newQuality;
      Serial.print("JPEG 품질 변경: ");
      Serial.println(jpegQuality);
      
      sensor_t * s = esp_camera_sensor_get();
      s->set_quality(s, jpegQuality);
    }
  }
  // 플래시 설정
  else if (strcmp(topic, topic_flash) == 0) {
    if (strcmp(message, "on") == 0) {
      flashEnabled = true;
      digitalWrite(LED_PIN, HIGH);
      Serial.println("플래시 켜짐");
    } else if (strcmp(message, "off") == 0) {
      flashEnabled = false;
      digitalWrite(LED_PIN, LOW);
      Serial.println("플래시 꺼짐");
    }
  }
}

// 이미지 캡처 및 전송 함수
void captureAndSendImage() {
  client.publish(topic_status, "capturing");
  Serial.println("이미지 캡처 중...");
  
  // 필요한 경우 플래시 켜기
  if (flashEnabled) {
    digitalWrite(LED_PIN, HIGH);
    delay(100); // 플래시가 켜질 시간 확보
